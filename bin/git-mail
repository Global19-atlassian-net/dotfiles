#!/usr/bin/env python2.7

'''
Git Mail: archive and send a git repo by email with a plain text message.

archive is sent as a zip attachment named after the repo
from address is set to git email

Automates sharing with impoverished (versioning-less) collaborators

INSTALL:
place in your PATH to be able to call "git mail" like a standard git command
'''

import sys, os, getopt
import subprocess as proc

import smtplib
from email import encoders
from email.mime.multipart import MIMEMultipart, MIMEBase
from email.mime.text import MIMEText

GIT_PATH = '/usr/local/bin/git'
MAIL_HOST = <mail_host>
MAIL_USER = <mail_user>
MAIL_PASS = <mail_password>

treeish = addr_to = subject = archive_f = log = None

# args and options
try:
  opts, args = getopt.getopt(sys.argv[1:], 'fts',
                            ['to=', 'subject=', 'filename=', 'log='])
  for o, a in opts:
    if o in ('-t', '--to'):
      addr_to = a
    if o in ('-s', '--subject'):
      subject = a
    if o in ('-f', '--filename'):
      archive_f = a
    if o == '--log':
      # include specified number of commits for an integer arg,
      # or default to the entire log
      try:
        log = int(a)
      except (TypeError, ValueError):
        log = True

  if args[0]:
    treeish = args[0]
except getopt.GetoptError, err:
  print str(err)
  sys.exit(2)
except IndexError:
  pass

# input
if not addr_to:
  addr_to = raw_input('To: ')
if not subject:
  subject = raw_input('Subject: ')

print 'Message: (enter a blank line to finish)'
msg_input = []
while True:
  msg_line = raw_input()
  if len(msg_line) == 0:
    break;
  msg_input.append(msg_line)
msg_text = '\n'.join(msg_input)

print "Preparing mail..."

# find out repo name (the top directory)
repo = proc.check_output([GIT_PATH, 'rev-parse', '--show-toplevel'])
repo = os.path.basename(repo).strip()

# find out git-configured email
addr_from = proc.check_output([GIT_PATH, 'config', 'user.email'])

# default treeish to archive is HEAD
treeish = treeish or 'HEAD'

# archive the repo in zip format (as a temporary file)
archive_f = archive_f or '%s.zip' % repo
try:
  archive = proc.check_output([GIT_PATH, 'archive', treeish, '--format=zip'])
except CalledProcessError:
  print "Could not archive the repo"
  exit(1)

# assemble mail
addr_from = addr_from.strip()
addr_to = addr_to.strip()
subject = subject.strip()

msg = MIMEMultipart()
msg['Subject'] = subject or 'Latest %s code' % repo
msg['From'] = addr_from
msg['To'] = addr_to
msg.preamble = msg_text

msg_body = MIMEText(msg_text, 'plain')
msg.attach(msg_body)

# attach archive as zip
zip_attach = MIMEBase('application', 'zip')
zip_attach.set_payload(archive)
encoders.encode_base64(zip_attach)
zip_attach.add_header('Content-Disposition', 'attachment',
                      filename=archive_f)
msg.attach(zip_attach)

# retrieve commit log and attach (if specified)
if log:
  log_call = [GIT_PATH, 'log', '--stat']
  if log is not True: # include number of log entries when specified
    log_call.append('-%d' % log)
  repo_log = proc.check_output(log_call)
  log_attach = MIMEText(repo_log, 'plain')
  log_attach.add_header('Content-Disposition', 'attachment',
                        filename='history.txt')
  msg.attach(log_attach)

# send mail w/ repo attached
print "Sending..."
composed_msg = msg.as_string()
server = smtplib.SMTP(MAIL_HOST)
server.starttls()
server.login(MAIL_USER, MAIL_PASS)
server.sendmail(addr_from, addr_to, composed_msg)
server.quit()

print "Done"