#!/bin/bash

# socks-on.sh <remote_host> <remote_user> <port> <interface>
# opens a SOCKS proxy tunnel and configures OS X to enable it.
#
# The proxy is closed and disabled in OS X networking automatically
# on script exit.
#
# Args default to:
# - remote_host = environment var SOCKS_HOST
# - remote_user = currently logged-in user
# - port = 9999
# - iface = Wi-Fi, the default OS X wireless interface

## input
remote_host=${1:-$SOCKS_HOST}
remote_user=${2:-`whoami`}
port=${3:-9999}
iface=${4:-Wi-Fi}

## traps

# turn off proxy when terminating
trap 'disable_proxy' TERM
trap 'disable_proxy' INT
trap 'disable_proxy' KILL

disable_proxy()
{
  networksetup -setsocksfirewallproxystate $iface off
  exit 0
}

## begin

# turn on SOCKS proxy in OS X network management
networksetup -setsocksfirewallproxy $iface localhost $port
networksetup -setsocksfirewallproxystate $iface on

# open SOCKS connection
ssh -N -D $port "${remote_user}@${remote_host}" -i ~/.ssh/id_rsa

## Note:
## if we were interested in the current state:
##networksetup -getsocksfirewallproxy Wi-F
